name: AKS Update Cafe App with PostgreSQL DB connection

on:
  workflow_dispatch:
    inputs:
      acrName: 
        description: "ACR name"
        required: true
      appDeploymentYamlEncoded:
        description: "Encoded deployment file"
        required: true
      appDockerfileEncoded:
        description: "Encoded Dockerfile"
        required: true
      appImage:
        description: "App image"
        required: true
      appName:
        description: "Open Liberty App name"
        required: true
      appNamespace:
        description: "Open Liberty App namespace"
        required: true
      appServerXmlEncoded:
        description: "Encoded Server.xml"
        required: true
      clusterName: 
        description: "AKS cluster name"
        required: true
      clusterRGName: 
        description: "AKS cluster resource group name"
        required: true
  repository_dispatch:

env:
    acrPassword: ${{ secrets.ACR_PASSWORD }}
    # description: "ACR password"
    # required: true
    # default: 'Vnhbk2f0nGX=LubJJVZTafm9aeuB=Xik'
    azCliVersion: 2.23.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
    dbAdminUser: ${{ secrets.DB_ADMIN_USER }}
    # description: 'DB username'
    # required: true
    # default: 'zchang@zhengtestdb0928'
    dbPassword: ${{ secrets.DB_PASSWORD }}
    # description: 'DB password'
    # required: true
    # default: 'Secret123!'
    dbServerName: ${{ secrets.DB_SERVER_NAME }}
    # description: 'Server name of the database'
    # required: true
    # default: 'zhengtestdb0928'
    location: eastus

jobs:
    deploy-app:
        runs-on: ubuntu-latest
        steps:
            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                java-version: 1.8
            - name: Install xmlstarlet
              run: |
                sudo apt-get install -y xmlstarlet
            - name: Install Docker
              run: |
                # Install docker
                sudo apt-get -q update
                sudo apt-get -y -q install apt-transport-https
                curl -m 120 -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo \
                    "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
                sudo apt-get -q update
                sudo apt-get -y -q install docker-ce docker-ce-cli containerd.io

                echo "docker version"
                sudo docker --version
                sudo systemctl start docker
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Checkout open-liberty-on-aks
              uses: actions/checkout@v2
            - name: Build the app
              run: |
                echo "build the Cafe web app"
                cd javaee-app-db-using-actions
                mvn clean install -Ddb.server.name=${{ env.dbServerName }} -Ddb.port.number=5432 -Ddb.name=postgres -Ddb.user=${{ env.dbAdminUser }} -Ddb.password=${{ env.dbPassword }}
            - name: Download PostgreSQL driver
              run: |
                cd javaee-app-db-using-actions/target
                wget -O postgresql-42.2.4.jar https://repo1.maven.org/maven2/org/postgresql/postgresql/42.2.4/postgresql-42.2.4.jar
            - name: Generate Server.xml
              run: |
                cd javaee-app-db-using-actions/target
                echo ${{ github.event.inputs.appServerXmlEncoded }} | base64 --decode >> server.xml
                xmlstarlet edit --inplace \
                    -d '/server/featureManager/feature' \
                    -d '/server/featureManager/feature[2]' \
                    -s '//featureManager' -t elem -n "feature" -v "cdi-2.0" \
                    -s '//featureManager' -t elem -n "feature" -v "jaxb-2.2" \
                    -s '//featureManager' -t elem -n "feature" -v "jsf-2.3" \
                    -s '//featureManager' -t elem -n "feature" -v "jaxrs-2.1" \
                    -s '//featureManager' -t elem -n "feature" -v "ejbLite-3.2" \
                    -s '//featureManager' -t elem -n "feature" -v "jpa-2.2" \
                    -s '//server' -t elem -n "dataSource" \
                    -s '//dataSource' -t attr -n "id" -v "JavaEECafeDB" \
                    -s '//dataSource' -t attr -n "jndiName" -v "jdbc/JavaEECafeDB" \
                    -s '//server/dataSource[last()]' -t elem -n "jdbcDriver" \
                    -s '//jdbcDriver' -t attr -n "libraryRef" -v "driver-library" \
                    -s '//server/dataSource[last()]' -t elem -n "properties.postgresql" \
                    -s '//properties.postgresql' -t attr -n "serverName" -v "\${db.server.name}" \
                    -s '//properties.postgresql' -t attr -n "portNumber" -v "\${db.port.number}" \
                    -s '//properties.postgresql' -t attr -n "databaseName" -v "\${db.name}" \
                    -s '//properties.postgresql' -t attr -n "user" -v "\${db.user}" \
                    -s '//properties.postgresql' -t attr -n "password" -v "\${db.password}" \
                    -s '//properties.postgresql' -t attr -n "ssl" -v "\${db.ssl}" \
                    -s '//server' -t elem -n "variable" \
                    -s '//variable' -t attr -n "name" -v "db.ssl" \
                    -s '//variable' -t attr -n "defaultValue" -v "true" \
                    -s '//server' -t elem -n "library" \
                    -s '//library' -t attr -n "id" -v "driver-library" \
                    -s '//server/library[last()]' -t elem -n "fileset" \
                    -s '//fileset' -t attr -n "dir" -v "\${shared.resource.dir}" \
                    -s '//fileset' -t attr -n "includes" -v "*.jar" \
                    -u '/server/webApplication/@location' -v "\${server.config.dir}/apps/javaee-cafe.war" \
                    server.xml
            - name: Archive server.xml
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: javaee-app-db-using-actions/target/server.xml
            - name: Generate deployment file
              run: |
                cd javaee-app-db-using-actions/target
                echo ${{ github.event.inputs.appDeploymentYamlEncoded }} | base64 --decode >> openlibertyapplication.yaml
                cat <<EOT >> openlibertyapplication.yaml
                  env:
                  - name: DB_SERVER_NAME
                    valueFrom:
                      secretKeyRef:
                        name: db-secret-postgres
                        key: db.server.name
                  - name: DB_PORT_NUMBER
                    valueFrom:
                      secretKeyRef:
                        name: db-secret-postgres
                        key: db.port.number
                  - name: DB_NAME
                    valueFrom:
                      secretKeyRef:
                        name: db-secret-postgres
                        key: db.name
                  - name: DB_USER
                    valueFrom:
                      secretKeyRef:
                        name: db-secret-postgres
                        key: db.user
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: db-secret-postgres
                        key: db.password
                EOT
            - name: Generate Dockerfile
              run: |
                cd javaee-app-db-using-actions/target
                echo ${{ github.event.inputs.appDockerfileEncoded }} | base64 --decode >> Dockerfile
                # Remove current app configuration
                sed -i "/${{ github.event.inputs.appName }}/d" Dockerfile
                lineNumber=$(grep -n 'COPY' Dockerfile | grep -Eo '^[^:]+')
                # Add postgresql driver
                sed -i "$lineNumber a COPY --chown=1001:0 postgresql-42.2.4.jar \/opt\/ol\/wlp\/usr\/shared\/resources\/" Dockerfile
                # Add built Cafe web app
                sed -i "$lineNumber a COPY --chown=1001:0 javaee-cafe.war \/config\/apps\/" Dockerfile
            - name: Archive Dockerfile
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: javaee-app-db-using-actions/target/Dockerfile
            - name: Build image
              run: |
                cd javaee-app-db-using-actions/target
                docker build -t javaee-cafe-connect-db-postgres:1.0.0 --pull --file=Dockerfile .
            - name: Push image
              run: |
                Container_Registry_URL=${{ github.event.inputs.acrName }}.azurecr.io
                IFS=':' read -a arr <<< ${{ github.event.inputs.appImage }}
                Image_Name=${arr[0]}
                echo $Image_name
                docker tag javaee-cafe-connect-db-postgres:1.0.0 ${Container_Registry_URL}/${Image_Name}:${{ github.run_id }}${{ github.run_number }}
                docker login -u ${{ github.event.inputs.acrName }} -p ${{ env.acrPassword }} ${Container_Registry_URL}
                docker push ${Container_Registry_URL}/${Image_Name}:${{ github.run_id }}${{ github.run_number }}
            - name: Create DB Secret file
              run: |
                cd javaee-app-db-using-actions/src/main/aks
                export NAMESPACE=${{ github.event.inputs.appNamespace }}
                export DB_SERVER_NAME=${{ env.dbServerName }}
                export DB_PORT_NUMBER=5432
                export DB_NAME=postgres
                export DB_USER=${{ env.dbAdminUser }}
                export DB_PASSWORD=${{ env.dbPassword }}

                envsubst < db-secret.yaml > db-secret-sub.yaml
            - name: Archive db-secret-sub.yaml
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: javaee-app-db-using-actions/src/main/aks/db-secret-sub.yaml
            - name: Update image path and place in values
              run: |
                cd javaee-app-db-using-actions/src/main/aks
                Container_Registry_URL=${{ github.event.inputs.acrName }}.azurecr.io
                IFS=':' read -a arr <<< ${{ github.event.inputs.appImage }}
                Image_Name=${arr[0]}
                sed -i "/applicationImage/d" openlibertyapplication.yaml
                lineNumber=$(grep -n 'replicas' openlibertyapplication.yaml | grep -Eo '^[^:]+')
                sed -i "$lineNumber a \  applicationImage: ${Container_Registry_URL}/${Image_Name}:${{ github.run_id }}${{ github.run_number }}" openlibertyapplication.yaml
            - name: Archive openlibertyapplication.yaml
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: javaee-app-db-using-actions/src/main/aks/openlibertyapplication.yaml
            - name: Connect to AKS cluster
              run: |
                cd javaee-app-db-using-actions/src/main/aks
                az aks get-credentials --resource-group ${{ github.event.inputs.clusterRGName }} --name ${{ github.event.inputs.clusterName }}
                cat db-secret-sub.yaml
                kubectl apply -f db-secret-sub.yaml
                cat openlibertyapplication.yaml
                kubectl apply -f openlibertyapplication.yaml
