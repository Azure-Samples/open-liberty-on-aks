name: AKS Update Cafe App with PostgreSQL DB connection

on:
  workflow_dispatch:
    inputs:
      acrName: 
        description: "ACR name"
        required: true
      appNamespace:
        description: "Open Liberty App namespace"
        required: true
      clusterName: 
        description: "AKS cluster name"
        required: true
      clusterRGName: 
        description: "AKS cluster resource group name"
        required: true
  repository_dispatch:

env:
    acrPassword: ${{ secrets.ACR_PASSWORD }}
    # description: "ACR password"
    # required: true
    # default: 'Vnhbk2f0nGX=LubJJVZTafm9aeuB=Xik'
    azCliVersion: 2.23.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
    dbAdminUser: ${{ secrets.DB_ADMIN_USER }}
    # description: 'DB username'
    # required: true
    # default: 'zchang@zhengtestdb0928'
    dbPassword: ${{ secrets.DB_PASSWORD }}
    # description: 'DB password'
    # required: true
    # default: 'Secret123!'
    dbServerName: ${{ secrets.DB_SERVER_NAME }}
    # description: 'Server name of the database'
    # required: true
    # default: 'zhengtestdb0928'
    location: eastus

jobs:
    deploy-app:
        runs-on: ubuntu-latest
        steps:
            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                java-version: 1.8
            - name: Install Docker
              run: |
                # Install docker
                sudo apt-get -q update
                sudo apt-get -y -q install apt-transport-https
                curl -m 120 -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo \
                    "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
                sudo apt-get -q update
                sudo apt-get -y -q install docker-ce docker-ce-cli containerd.io

                echo "docker version"
                sudo docker --version
                sudo systemctl start docker
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Checkout open-liberty-on-aks
              uses: actions/checkout@v2
            - name: Setup environment variables
              run: |
                echo "LOGIN_SERVER"=${{ github.event.inputs.acrName }}.azurecr.io >> $GITHUB_ENV
                echo "REGISTRY_NAME"=${{ github.event.inputs.acrName }} >> $GITHUB_ENV
                echo "USER_NAME"=${{ github.event.inputs.acrName }} >> $GITHUB_ENV
                echo "PASSWORD"=${{ env.acrPassword }} >> $GITHUB_ENV
                echo "DB_SERVER_NAME"=${{ env.dbServerName }} >> $GITHUB_ENV
                echo "DB_PORT_NUMBER"=5432 >> $GITHUB_ENV
                echo "DB_TYPE"=postgres >> $GITHUB_ENV
                echo "DB_USER"=${{ env.dbAdminUser }} >> $GITHUB_ENV
                echo "DB_PASSWORD"=${{ env.dbPassword }} >> $GITHUB_ENV
                echo "NAMESPACE"=${{ github.event.inputs.appNamespace }} >> $GITHUB_ENV
            - name: Build the app
              run: |
                echo "build the Cafe web app"
                cd javaee-app-db-using-actions/postgres
                
                export LOGIN_SERVER=$LOGIN_SERVER
                export REGISTRY_NAME=$REGISTRY_NAME
                export USER_NAME=$USER_NAME
                export PASSWORD=$PASSWORD
                export DB_SERVER_NAME=$DB_SERVER_NAME
                export DB_PORT_NUMBER=$DB_PORT_NUMBER
                export DB_TYPE=$DB_TYPE
                export DB_USER=$DB_USER
                export DB_PASSWORD=$DB_PASSWORD
                export NAMESPACE=$NAMESPACE

                mvn clean install
            - name: Archive server.xml
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: javaee-app-db-using-actions/postgres/target/liberty/wlp/usr/servers/defaultServer/server.xml
            - name: Archive Dockerfile
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: javaee-app-db-using-actions/postgres/target/Dockerfile
            - name: Build image
              run: |
                cd javaee-app-db-using-actions/postgres

                # Fetch maven artifactId as image name, maven build version as image version
                export IMAGE_NAME=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
                export IMAGE_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
                
                echo $IMAGE_NAME $IMAGE_VERSION
                echo "IMAGE_NAME"=$IMAGE_NAME >> $GITHUB_ENV
                echo "IMAGE_VERSION"=$IMAGE_VERSION >> $GITHUB_ENV

                
                cd target

                # If you are running with Open Liberty
                docker build -t ${IMAGE_NAME}:${IMAGE_VERSION} --pull --file=Dockerfile .
            - name: Push image
              run: |
                docker tag ${IMAGE_NAME}:${IMAGE_VERSION} ${LOGIN_SERVER}/${IMAGE_NAME}:${{ github.run_id }}${{ github.run_number }}
                docker login -u ${{ github.event.inputs.acrName }} -p ${{ env.acrPassword }} ${LOGIN_SERVER}
                docker push ${LOGIN_SERVER}/${IMAGE_NAME}:${{ github.run_id }}${{ github.run_number }}
            - name: Archive db-secret.yaml
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: javaee-app-db-using-actions/postgres/target/db-secret.yaml
            - name: Update image path and place in values
              run: |
                cd javaee-app-db-using-actions/postgres/target

                sed -i "/applicationImage/d" openlibertyapplication.yaml
                lineNumber=$(grep -n 'replicas' openlibertyapplication.yaml | grep -Eo '^[^:]+')
                sed -i "$lineNumber a \  applicationImage: ${LOGIN_SERVER}/${IMAGE_NAME}:${{ github.run_id }}${{ github.run_number }}" openlibertyapplication.yaml
            - name: Archive openlibertyapplication.yaml
              uses: actions/upload-artifact@v1
              with:
                name: archivefiles
                path: javaee-app-db-using-actions/postgres/target/openlibertyapplication.yaml
            - name: Connect to AKS cluster
              run: |
                cd javaee-app-db-using-actions/postgres/target
                az aks get-credentials --resource-group ${{ github.event.inputs.clusterRGName }} --name ${{ github.event.inputs.clusterName }}
                cat db-secret.yaml
                kubectl apply -f db-secret.yaml
                cat openlibertyapplication.yaml

                timestampBeforeDeployment=$(date +%s)
                echo "timestampBeforeDeployment=${timestampBeforeDeployment}" >> $GITHUB_ENV
                sleep 5

                kubectl apply -f openlibertyapplication.yaml
            - name: Verify pods are restarted
              run: |
                # interval of checking pod status.
                checkPodStatusInterval=20
                # max attempt to check pod status.
                checkPodStatusMaxAttempts=30
                # other variables
                updatedPodNum=0
                attempt=0
                appReplicas=3
                echo $timestampBeforeDeployment $appReplicas $checkPodStatusMaxAttempts $checkPodStatusInterval
                while [[ ${updatedPodNum} -lt ${appReplicas} ]] && [[ $attempt -le ${checkPodStatusMaxAttempts} ]]; do
                    echo "attempts ${attempt}"
                    ret=$(kubectl get pods -n ${NAMESPACE} -o json | jq '.items[] | .metadata.creationTimestamp' | tr -d "\"")
                    counter=0
                    for item in $ret; do
                        podCreateTimeStamp=$(date -u -d "${item}" +"%s")
                        echo "pod create time: $podCreateTimeStamp, base time: ${timestampBeforeDeployment}"
                        if [[ ${podCreateTimeStamp} -gt ${timestampBeforeDeployment} ]]; then
                            counter=$((counter + 1))
                        fi
                    done
                    updatedPodNum=$counter
                    echo "Number of new pod: ${updatedPodNum}"
                    attempt=$((attempt + 1))
                    sleep ${checkPodStatusInterval}
                done
                if [[ ${attempt} -gt ${checkPodStatusMaxAttempts} ]]; then
                    echo "Failed to restart all pods. "
                    exit 1
                fi
